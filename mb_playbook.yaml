---
  - name: Check cgroup configuration on all nodes
    hosts: all
    gather_facts: true

    tasks:
      - name: Check if cgroup config is existing or not
        shell: grep -o "cgroup_memory=1 cgroup_enable=memory" /boot/firmware/cmdline.txt
        register: out
        failed_when: false
        changed_when: false

      - name: Execute if not existing
        shell: |
                cp /boot/firmware/cmdline.txt /boot/firmware/cmdline.txt.backup.%date
                sed -i 's/$/ cgroup_memory=1 cgroup_enable=memory/g' /boot/firmware/cmdline.txt
                sleep 5 && shutdown -r now "Ansible Rebooting after cgroup configuration"
        when: "'cgroup_memory=1 cgroup_enable=memory' not in out.stdout"
        async: 0
        poll: 0
        ignore_unreachable: true
        become: true
        become_method: sudo

      - name: Waiting for server to come back
        wait_for_connection:
          delay: 5

  - name: Master Node Configuration
    hosts: masternode
    gather_facts: no

    tasks:
      - name: Check if 10250 is Opened
        wait_for:
          port: 10250
          delay: 5
          timeout: 10
          msg: "10250 is not open"
        register: port_check
        ignore_errors: yes

      - name: Open port 10250 in iptables
        shell: iptables -A INPUT -p tcp --dport 10250 -j ACCEPT
        when: port_check.failed == true
        become: true
        become_method: sudo

      - name: Print message if 10250 is Already Opened
        debug:
          msg: "10250 is already Opened"
        when: port_check.failed == false

      - name: Install k3s in Master Node
        shell: |
                curl -sfL https://get.k3s.io | sh -
                kubectl get nodes
        become: true
        become_method: sudo

  - name: Gather IP and Node Token from Master Node
    hosts: masternode
    gather_facts: no

    tasks:
      - name: Get the IP of Master Node
        shell: hostname -I | awk '{print$1}'
        register: masterIP

      - name: Get the Node Token value from the Master
        shell: cat /var/lib/rancher/k3s/server/node-token
        become: true
        become_method: sudo
        register: nodeToken

      - name: Add to a dummy host
        add_host:
          name: "K3s_MASTER_DETAILS"
          masterip: "{{ masterIP.stdout }}"
          nodetoken: "{{ nodeToken.stdout }}"

  - name: Install K3s in Worker nodes
    hosts: workers
    gather_facts: no
    tasks:
      - name: Installing K3s agents
        shell: curl -sfL https://get.k3s.io | K3S_URL=https://{{ hostvars['K3s_MASTER_DETAILS']['masterip'] }}:6443 K3S_TOKEN={{ hostvars['K3s_MASTER_DETAILS']['nodetoken'] }} sh -

  - name: Install Helm on all nodes
    hosts: masternode
    gather_facts: no
    tasks:
      - name: Install Helm from a script
        shell: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
        become: true
        become_method: sudo

  - name: Install AWS cli on all nodes
    hosts: masternode
    gather_facts: no
    tasks:
      - name: Install package dependencies
        ansible.builtin.package: name={{ item }} state=present
        with_items:
          - awscli
        become: true
        become_method: sudo

  # - name: Install Grafana Helm Chart for testing
  #   hosts: all:!K3s_MASTER_DETAILS
  #   gather_facts: no
  #   vars:
  #     kubeconfig_path: /etc/rancher/k3s/k3s.yaml
  #   tasks:
  #     - name: Deploy latest version of Grafana chart inside testing namespace
  #       kubernetes.core.helm:
  #         chart_ref: oci://registry-1.docker.io/bitnamicharts/grafana
  #         chart_version: "9.2.3"
  #         release_name: test-graphana
  #         release_namespace: testing
  #         create_namespace: true
  #         atomic: true
  #         wait: true
  #         kubeconfig: "{{ kubeconfig_path }}"
  #       become: true
  #       become_method: sudo

  #     - name: Gather information about the installed Grafana helm chart
  #       kubernetes.core.helm_info:
  #           release_name: test-graphana
  #           release_namespace: testing
  #           kubeconfig: "{{ kubeconfig_path }}"
  #       become: true
  #       become_method: sudo
  #       register: graphana_info

  #     - name: Debug
  #       debug: var=graphana_info

  # - name: Install some Test Helm Chart from public ECR
  #   # hosts: all:!K3s_MASTER_DETAILS
  #   hosts: all
  #   gather_facts: no
  #   vars:
  #     ecr_registry: public.ecr.aws
  #     ecr_registry_alias: r3m4q3r9
  #     ecr_helm_repository: pub-mirror-k3s
  #     helm_chart_version: "{{ test_version }}"
  #     kubeconfig_path: /etc/rancher/k3s/k3s.yaml
  #   tasks:
  #     - name: Login to Helm registry
  #       shell: aws ecr get-login-password --region us-east-1 | helm registry login --username AWS --password-stdin {{ ecr_registry }}

  #     - name: Install the Helm chart from ECR
  #       kubernetes.core.helm:
  #         chart_ref: "oci://{{ ecr_registry }}/{{ ecr_registry_alias }}/{{ ecr_helm_repository }}"
  #         chart_version: "{{ helm_chart_version }}"
  #         atomic: true
  #         wait: true
  #         kubeconfig: "{{ kubeconfig_path }}"
  #         release_name: test-ecr
  #         release_namespace: testing
  #         create_namespace: true
  #         release_state: present
  #       become: true
  #       become_method: sudo

  #     - name: Gather information about the installed test helm chart
  #       kubernetes.core.helm_info:
  #           release_name: test-ecr
  #           release_namespace: testing
  #           kubeconfig: "{{ kubeconfig_path }}"
  #       become: true
  #       become_method: sudo
  #       register: ecr_info

  #     - name: Debug
  #       debug: var=ecr_info

  - name: Install the frontend Helm Chart from private repository
    hosts: masternode
    vars:
      helm_chart_registry: 689943567978.dkr.ecr.eu-west-1.amazonaws.com
      helm_chart_repository: fe-test-chart
      helm_chart_tag: 0.2.3
      docker_image_tag: 0.2.3
    tasks:
      # - name: Configure AWS profile - you don't need this if you have aws credentials already available in .aws/credentials
      #   shell: |
      #     aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      #     aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      #     aws configure set aws_session_token $AWS_SESSION_TOKEN
      #     aws configure set region eu-west-1

      - name: Authenticate Helm to ECR
        shell: aws ecr get-login-password --region eu-west-1 |
          helm registry login --username AWS --password-stdin {{ helm_chart_registry }}

      # - name: Copy helm config file to k3s
      #   ansible.builtin.copy:
      #     src: "{{ ansible_env.HOME }}/.config/helm/registry/config.json"
      #     dest: "{{ ansible_env.HOME }}/etc/rancher/k3s/registries.yaml"
      # TOKEN=`aws ecr --region=eu-west-1 get-authorization-token --output text --query authorizationData[].authorizationToken | base64 -d | cut -d: -f2`

      - name: Delete K3s used secret
        shell: |
          kubectl delete secret --ignore-not-found dockersecret --namespace machine-builder
        become: true
        become_method: sudo

      - name: Get the AWS password
        shell: |
          aws ecr get-login-password --region eu-west-1
        register: aws_pass

      - name: Create k3s secret for the container
        shell: |
          kubectl create secret docker-registry dockersecret \
            --namespace machine-builder \
            --docker-server=https://{{ helm_chart_registry }} \
            --docker-username=AWS \
            --docker-password="{{ aws_pass.stdout }}"
        become: true
        become_method: sudo

      - name: Copy FE values to hosts
        ansible.builtin.copy:
          src: ./values-fe.yaml
          dest: "{{ ansible_env.HOME }}/values-fe.yaml"
        become: true
        become_method: sudo

      - name: Install Frontend Helm chart from private ECR using helm commands
        shell: |
            helm upgrade test oci://{{ helm_chart_registry }}/{{ helm_chart_repository }} \
              --version {{ helm_chart_tag }} \
              --install \
              --atomic \
              --timeout=120s \
              --namespace machine-builder \
              --create-namespace \
              -f {{ ansible_env.HOME }}/values-fe.yaml \
              --set image.repository={{ helm_chart_registry }}/frontend \
              --set image.tag={{ docker_image_tag }} \
              --kubeconfig /etc/rancher/k3s/k3s.yaml \
              --registry-config {{ ansible_env.HOME }}/.config/helm/registry/config.json
        become: true
        become_method: sudo
        register: helm_release

      - name: Debug
        debug: var=helm_release

      - name: Get History
        shell: |
          helm history test \
              --namespace machine-builder \
              --kubeconfig /etc/rancher/k3s/k3s.yaml \
              --registry-config {{ ansible_env.HOME }}/.config/helm/registry/config.json
        become: true
        become_method: sudo
        register: frontend_history

      - name: Debug
        debug: var=frontend_history

      - name: Gather information about the installed frontend helm chart
        kubernetes.core.helm_info:
            release_name: frontend
            release_namespace: machine-builder
            kubeconfig: /etc/rancher/k3s/k3s.yaml
        become: true
        become_method: sudo
        register: frontend_info

      - name: Debug
        debug: var=frontend_info

      # - name: Install Frontend Helm chart from private ECR
      #   kubernetes.core.helm:
      #     chart_ref: "oci://{{ helm_chart_registry }}/{{ helm_chart_repository }}"
      #     chart_version: "{{ helm_chart_tag }}"
      #     atomic: true
      #     wait: true
      #     kubeconfig: /etc/rancher/k3s/k3s.yaml
      #     release_name: frontend
      #     release_namespace: machine-builder
      #     create_namespace: true
      #     release_state: present
      #     release_values:
      #       image.tag: "{{ helm_chart_tag }}"
      #   become: true
      #   become_method: sudo

  - name: Install the Frontend Helm Chart from public ECR
    hosts: masternode
    gather_facts: no
    vars:
      ecr_registry: public.ecr.aws
      ecr_registry_alias: o4g5e1v3
      ecr_helm_repository: mb-frontend-chart
      helm_chart_version: "{{ mb_frontend_version }}"
      kubeconfig_path: /etc/rancher/k3s/k3s.yaml
    tasks:
      - name: Login to Helm registry
        shell: aws ecr-public get-login-password --region us-east-1 | helm registry login --username AWS --password-stdin {{ ecr_registry }}

      - name: Install Frontend Helm chart from ECR
        kubernetes.core.helm:
          chart_ref: "oci://{{ ecr_registry }}/{{ ecr_registry_alias }}/{{ ecr_helm_repository }}"
          chart_version: "{{ helm_chart_version }}"
          atomic: true
          wait: true
          kubeconfig: "{{ kubeconfig_path }}"
          release_name: frontend
          release_namespace: machine-builder
          create_namespace: true
          release_state: present
          release_values:
            image.tag: "{{ helm_chart_version }}"
        become: true
        become_method: sudo

      - name: Gather information about the installed frontend helm chart
        kubernetes.core.helm_info:
            release_name: frontend
            release_namespace: machine-builder
            kubeconfig: "{{ kubeconfig_path }}"
        become: true
        become_method: sudo
        register: frontend_info

      - name: Debug
        debug: var=frontend_info

  # - name: Install the Backend Helm Chart from public ECR
  #   hosts: all:!K3s_MASTER_DETAILS
  #   gather_facts: no
  #   vars:
  #     ecr_registry: public.ecr.aws
  #     ecr_registry_alias: mb-backend
  #     ecr_helm_repository: chart
  #     helm_chart_version: "{{ mb_backend_version }}"
  #     kubeconfig_path: /etc/rancher/k3s/k3s.yaml
  #   tasks:
  #     - name: Login to Helm registry
  #       shell: aws ecr get-login-password --region eu-west-1 | helm registry login --username AWS --password-stdin {{ ecr_registry }}

  #     - name: Install Backend Helm umbrella chart from ECR
  #       kubernetes.core.helm:
  #         chart_ref: "oci://{{ ecr_registry }}/{{ ecr_registry_alias }}/{{ ecr_helm_repository }}"
  #         chart_version: "{{ helm_chart_version }}"
  #         atomic: true
  #         wait: true
  #         kubeconfig: "{{ kubeconfig_path }}"
  #         release_name: backend
  #         release_namespace: machine-builder
  #         create_namespace: true
  #         release_state: present
  #         release_values:
  #           assets-api.image.tag: "{{ helm_chart_version }}"
  #       become: true
  #       become_method: sudo

  #     - name: Gather information about the installed backend helm umbrella chart
  #       kubernetes.core.helm_info:
  #           release_name: backend
  #           release_namespace: machine-builder
  #           kubeconfig: "{{ kubeconfig_path }}"
  #       become: true
  #       become_method: sudo
  #       register: backend_info

  #     - name: Debug
  #       debug: var=backend_info