---
  - name: Check cgroup configuration on all nodes
    hosts: all
    gather_facts: true

    tasks:
      - name: Check if cgroup config is existing or not
        shell: grep -o "cgroup_memory=1 cgroup_enable=memory" /boot/firmware/cmdline.txt
        register: out
        failed_when: false
        changed_when: false

      - name: Execute if not existing
        shell: |
                cp /boot/firmware/cmdline.txt /boot/firmware/cmdline.txt.backup.%date
                sed -i 's/$/ cgroup_memory=1 cgroup_enable=memory/g' /boot/firmware/cmdline.txt
                sleep 5 && shutdown -r now "Ansible Rebooting after cgroup configuration"
        when: "'cgroup_memory=1 cgroup_enable=memory' not in out.stdout"
        async: 0
        poll: 0
        ignore_unreachable: true
        become: true
        become_method: sudo

      - name: Waiting for server to come back
        wait_for_connection:
          delay: 5

  - name: Master Node Configuration
    hosts: masternode
    gather_facts: no

    tasks:
      - name: Check if 10250 is Opened
        wait_for:
          port: 10250
          delay: 5
          timeout: 10
          msg: "10250 is not open"
        register: port_check
        ignore_errors: yes

      - name: Open port 10250 in iptables
        shell: iptables -A INPUT -p tcp --dport 10250 -j ACCEPT
        when: port_check.failed == true
        become: true
        become_method: sudo

      - name: Print message if 10250 is Already Opened
        debug:
          msg: "10250 is already Opened"
        when: port_check.failed == false

      - name: Install k3s in Master Node
        shell: |
                curl -sfL https://get.k3s.io | sh -
                kubectl get nodes
        become: true
        become_method: sudo

  - name: Gather IP and Node Token from Master Node
    hosts: masternode
    gather_facts: no

    tasks:
      - name: Get the IP of Master Node
        shell: hostname -I | awk '{print$1}'
        register: masterIP

      - name: Get the Node Token value from the Master
        shell: cat /var/lib/rancher/k3s/server/node-token
        become: true
        become_method: sudo
        register: nodeToken

      - name: Add to a dummy host
        add_host:
          name: "K3s_MASTER_DETAILS"
          masterip: "{{ masterIP.stdout }}"
          nodetoken: "{{ nodeToken.stdout }}"

  - name: Install K3s in Worker nodes
    hosts: workers
    tasks:
      - name: Installing K3s agents
        shell: curl -sfL https://get.k3s.io | K3S_URL=https://{{ hostvars['K3s_MASTER_DETAILS']['masterip'] }}:6443 K3S_TOKEN={{ hostvars['K3s_MASTER_DETAILS']['nodetoken'] }} sh -

  - name: Install Helm on all nodes
    hosts: all:!K3s_MASTER_DETAILS
    tasks:
      - name: Install Helm from a script
        shell: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
        become: true
        become_method: sudo

  - name: Install AWS cli on all nodes
    hosts: all:!K3s_MASTER_DETAILS
    tasks:
      - name: Install package dependencies
        ansible.builtin.package:
          name: awscli
          state: present
        become: true
        become_method: sudo

  # - name: Install the Helm Chart from private repository
  #   hosts: all:!K3s_MASTER_DETAILS
  #   vars:
  #     helm_chart_registry: 689943567978.dkr.ecr.eu-west-1.amazonaws.com
  #     helm_chart_repository: frontend
  #     helm_chart_tag: 0.3.0-24-g37171e5
  #   tasks:
  #     - name: Configure AWS profile
  #       shell: |
  #         aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile machine_builder_sandbox
  #         aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile machine_builder_sandbox
  #         aws configure set aws_session_token $AWS_SESSION_TOKEN --profile machine_builder_sandbox
  #         aws configure set region eu-west-1 --profile machine_builder_sandbox

  #     - name: Login to Helm registry
  #       shell: aws ecr get-login-password --region eu-west-1 --profile machine_builder_sandbox | 
  #             helm registry login --username AWS --password-stdin {{ helm_chart_registry }}
  #             helm registry login {{ helm_chart_registry }} --username AWS --password-stdin <(echo ${{ secrets.AWS_SECRET_ACCESS_KEY }})

  #     - name: Install Frontend Helm chart from ECR
  #       kubernetes.core.helm:
  #         chart_ref: "oci://{{ helm_chart_registry }}/{{ helm_chart_repository }}"
  #         chart_version: "{{ helm_chart_tag }}"
  #         atomic: true
  #         wait: true
  #         kubeconfig: /etc/rancher/k3s/k3s.yaml
  #         release_name: frontend
  #         release_namespace: machine-builder
  #         create_namespace: true
  #         release_state: present
  #         update_repo_cache: true
  #         set_values:
  #           - value: "image.tag={{ helm_chart_tag }}"
  #             value_type: string

  - name: Install the Helm Chart from public repository
    hosts: all:!K3s_MASTER_DETAILS
    vars:
      helm_chart_registry: public.ecr.aws
      helm_chart_registry_alias: registry-alias
      helm_chart_repository: mb-frontend
      helm_chart_tag: latest
    tasks:
      - name: Login to Helm registry
        shell: aws ecr get-login-password --region eu-west-1 | helm registry login --username AWS --password-stdin {{ helm_chart_registry }}

      - name: Install Frontend Helm chart from ECR
        kubernetes.core.helm:
          chart_ref: "oci://{{ helm_chart_registry }}/{{ helm_chart_registry_alias }}/{{ helm_chart_repository }}"
          chart_version: "{{ helm_chart_tag }}"
          atomic: true
          wait: true
          kubeconfig: /etc/rancher/k3s/k3s.yaml
          release_name: frontend
          release_namespace: machine-builder
          create_namespace: true
          release_state: present
          update_repo_cache: true
          set_values:
            - value: "image.tag={{ helm_chart_tag }}"
              value_type: string